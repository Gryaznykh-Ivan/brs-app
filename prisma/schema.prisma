generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  HEADMAN
  TEACHER
  ADMIN
}

enum SubjectType {
  ELECTIVE_COURSE
  DISCIPLINE
}

model User {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(32)
  lastName  String    @db.VarChar(32)
  FIO       String    @db.VarChar(64)
  birthday  DateTime?
  email     String    @unique @db.VarChar(32)
  groupId     String?   @db.VarChar(4)
  password  String?   @db.VarChar(64)
  code      String?   @db.VarChar(64)
  role      UserRole  @default(STUDENT)
  group     Group?    @relation(fields: [groupId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  subjects  Subject[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  marks     Mark[]

  @@fulltext([FIO])
}

model Group {
  id           String    @id @db.VarChar(4)
  faculty      Int?      @db.SmallInt
  foundingDate DateTime?
  students    User[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  subjects     Subject[]
  Table        Table[]
}

model Subject {
  id          String      @id @default(uuid())
  type        SubjectType @default(DISCIPLINE)
  createdBy   User        @relation(fields: [createdById], references: [id], onDelete: Cascade, onUpdate: Cascade)
  title       String      @db.VarChar(128)
  groups      Group[]
  tables      Table[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdById String

  @@fulltext([title])
}

model Table {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(64)
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subject   Subject  @relation(fields: [subjectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subjectId String
  groupId   String?  @db.VarChar(4)
  Mark      Mark[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mark {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(16)
  value     Int      @db.TinyInt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tableId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}
